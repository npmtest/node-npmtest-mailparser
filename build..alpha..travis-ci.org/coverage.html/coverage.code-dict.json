{"/home/travis/build/npmtest/node-npmtest-mailparser/test.js":"/* istanbul instrument in package npmtest_mailparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailparser/lib.npmtest_mailparser.js":"/* istanbul instrument in package npmtest_mailparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailparser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailparser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailparser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailparser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailparser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailparser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mailparser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailparser.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mailparser.__dirname +\n                    '/lib.npmtest_mailparser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailparser/mailparser/index.js":"'use strict';\n\nconst MailParser = require('./lib/mail-parser');\nconst simpleParser = require('./lib/simple-parser');\n\nmodule.exports = {\n    MailParser,\n    simpleParser\n};\n","/home/travis/build/npmtest/node-npmtest-mailparser/mailparser/lib/mail-parser.js":"'use strict';\n\nconst mailsplit = require('mailsplit');\nconst libmime = require('libmime');\nconst addressparser = require('addressparser');\nconst Transform = require('stream').Transform;\nconst Splitter = mailsplit.Splitter;\nconst punycode = require('punycode');\nconst FlowedDecoder = require('./flowed-decoder');\nconst StreamHash = require('./stream-hash');\nconst iconv = require('iconv-lite');\nconst marked = require('marked');\nconst htmlToText = require('html-to-text');\nconst he = require('he');\n\nclass MailParser extends Transform {\n    constructor(config) {\n        let options = {\n            readableObjectMode: true,\n            writableObjectMode: false\n        };\n        super(options);\n\n        this.options = config || {};\n        this.splitter = new Splitter();\n        this.finished = false;\n        this.waitingEnd = false;\n\n        this.headers = false;\n\n        this.endReceived = false;\n        this.reading = false;\n        this.errored = false;\n\n        this.tree = false;\n        this.curnode = false;\n        this.waitUntilAttachmentEnd = false;\n        this.attachmentCallback = false;\n\n        this.hasHtml = false;\n        this.hasText = false;\n\n        this.text = false;\n        this.html = false;\n        this.textAsHtml = false;\n\n        this.attachmentList = [];\n\n        this.splitter.on('readable', () => {\n            if (this.reading) {\n                return false;\n            }\n            this.readData();\n        });\n\n        this.splitter.on('end', () => {\n            this.endReceived = true;\n            if (!this.reading) {\n                this.endStream();\n            }\n        });\n\n        this.splitter.on('error', err => {\n            this.errored = true;\n            if (typeof this.waitingEnd === 'function') {\n                return this.waitingEnd(err);\n            }\n            this.emit('error', err);\n        });\n    }\n\n    readData() {\n        if (this.errored) {\n            return false;\n        }\n        this.reading = true;\n        let data = this.splitter.read();\n        if (data === null) {\n            this.reading = false;\n            if (this.endReceived) {\n                this.endStream();\n            }\n            return;\n        }\n\n        this.processChunk(data, err => {\n            if (err) {\n                if (typeof this.waitingEnd === 'function') {\n                    return this.waitingEnd(err);\n                }\n                return this.emit('error', err);\n            }\n            setImmediate(() => this.readData());\n        });\n    }\n\n    endStream() {\n        this.finished = true;\n        if (typeof this.waitingEnd === 'function') {\n            this.waitingEnd();\n        }\n    }\n\n    _transform(chunk, encoding, done) {\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n\n        if (this.splitter.write(chunk) === false) {\n            return this.splitter.once('drain', () => {\n                done();\n            });\n        } else {\n            return done();\n        }\n    }\n\n    _flush(done) {\n        setImmediate(() => this.splitter.end());\n        if (this.finished) {\n            return this.cleanup(done);\n        }\n        this.waitingEnd = () => this.cleanup(done);\n    }\n\n    cleanup(done) {\n        if (this.curnode && this.curnode.decoder) {\n            this.curnode.decoder.end();\n        }\n        setImmediate(() => {\n            this.push(this.getTextContent());\n            done();\n        });\n    }\n\n    processHeaders(lines) {\n        let headers = new Map();\n        (lines || []).forEach(line => {\n            let key = line.key;\n            let value = ((libmime.decodeHeader(line.line) || {}).value || '').toString().trim();\n            value = Buffer.from(value, 'binary').toString();\n            switch (key) {\n                case 'content-type':\n                case 'content-disposition':\n                case 'dkim-signature':\n                    value = libmime.parseHeaderValue(value);\n                    Object.keys(value && value.params || {}).forEach(key => {\n                        try {\n                            value.params[key] = libmime.decodeWords(value.params[key]);\n                        } catch (E) {\n                            // ignore, keep as is\n                        }\n                    });\n                    break;\n                case 'date':\n                    value = new Date(value);\n                    if (!value || value.toString() === 'Invalid Date' || !value.getTime()) {\n                        // date parsing failed :S\n                        value = new Date();\n                    }\n                    break;\n                case 'subject':\n                    try {\n                        value = libmime.decodeWords(value);\n                    } catch (E) {\n                        // ignore, keep as is\n                    }\n                    break;\n                case 'references':\n                    value = value.split(/\\s+/).map(this.ensureMessageIDFormat);\n                    break;\n                case 'message-id':\n                    value = this.ensureMessageIDFormat(value);\n                    break;\n                case 'in-reply-to':\n                    value = this.ensureMessageIDFormat(value);\n                    break;\n                case 'priority':\n                case 'x-priority':\n                case 'x-msmail-priority':\n                case 'importance':\n                    key = 'priority';\n                    value = this.parsePriority(value);\n                    break;\n                case 'from':\n                case 'to':\n                case 'cc':\n                case 'bcc':\n                case 'sender':\n                case 'reply-to':\n                case 'delivered-to':\n                case 'return-path':\n                    value = addressparser(value);\n                    this.decodeAddresses(value);\n                    value = {\n                        value,\n                        html: this.getAddressesHTML(value),\n                        text: this.getAddressesText(value)\n                    };\n                    break;\n            }\n\n            // handle list-* keys\n            if (key.substr(0, 5) === 'list-') {\n                value = this.parseListHeader(key.substr(5), value);\n                key = 'list';\n            }\n\n            if (value) {\n                if (!headers.has(key)) {\n                    headers.set(key, [].concat(value || []));\n                } else if (Array.isArray(value)) {\n                    headers.set(key, headers.get(key).concat(value));\n                } else {\n                    headers.get(key).push(value);\n                }\n            }\n        });\n\n        // keep only the first value\n        let singleKeys = ['message-id', 'content-id', 'from', 'sender', 'in-reply-to', 'reply-to', 'subject', 'date', 'content-disposition', 'content-type', 'content-transfer-encoding', 'priority', 'mime-version', 'content-description', 'precedence', 'errors-to'];\n\n        headers.forEach((value, key) => {\n            if (Array.isArray(value)) {\n                if (singleKeys.includes(key) && value.length) {\n                    headers.set(key, value[value.length - 1]);\n                } else if (value.length === 1) {\n                    headers.set(key, value[0]);\n                }\n            }\n\n            if (key === 'list') {\n                // normalize List-* headers\n                let listValue = {};\n                [].concat(value || []).forEach(val => {\n                    Object.keys(val || {}).forEach(listKey => {\n                        listValue[listKey] = val[listKey];\n                    });\n                });\n                headers.set(key, listValue);\n            }\n        });\n\n        return headers;\n    }\n\n    parseListHeader(key, value) {\n        let addresses = addressparser(value);\n        let response = {};\n        let data = addresses.map(address => {\n            if (/^https?:/i.test(address.name)) {\n                response.url = address.name;\n            } else if (address.name) {\n                response.name = address.name;\n            }\n            if (/^mailto:/.test(address.address)) {\n                response.mail = address.address.substr(7);\n            } else if (address.address && address.address.indexOf('@') < 0) {\n                response.id = address.address;\n            } else if (address.address) {\n                response.mail = address.address;\n            }\n            if (Object.keys(response).length) {\n                return response;\n            }\n            return false;\n        }).filter(address => address);\n        if (data.length) {\n            return {\n                [key]: response\n            };\n        }\n        return false;\n    }\n\n    parsePriority(value) {\n        value = value.toLowerCase().trim();\n        if (!isNaN(parseInt(value, 10))) { // support \"X-Priority: 1 (Highest)\"\n            value = parseInt(value, 10) || 0;\n            if (value === 3) {\n                return 'normal';\n            } else if (value > 3) {\n                return 'low';\n            } else {\n                return 'high';\n            }\n        } else {\n            switch (value) {\n                case 'non-urgent':\n                case 'low':\n                    return 'low';\n                case 'urgent':\n                case 'high':\n                    return 'high';\n            }\n        }\n        return 'normal';\n    }\n\n    ensureMessageIDFormat(value) {\n        if (!value.length) {\n            return false;\n        }\n\n        if (value.charAt(0) !== '<') {\n            value = '<' + value;\n        }\n\n        if (value.charAt(value.length - 1) !== '>') {\n            value += '>';\n        }\n\n        return value;\n    }\n\n    decodeAddresses(addresses) {\n        addresses.forEach(address => {\n            address.name = (address.name || '').toString();\n            if (address.name) {\n                try {\n                    address.name = libmime.decodeWords(address.name);\n                } catch (E) {\n                    //ignore, keep as is\n                }\n            }\n            if (/@xn\\-\\-/.test(address.address)) {\n                address.address = address.address.substr(0, address.address.lastIndexOf('@') + 1) + punycode.toUnicode(address.address.substr(address.address.lastIndexOf('@') + 1));\n            }\n            if (address.group) {\n                this.decodeAddresses(address.group);\n            }\n        });\n    }\n\n    createNode(node) {\n\n        let contentType = node.contentType;\n        let disposition = node.disposition;\n        let encoding = node.encoding;\n        let charset = node.charset;\n\n        if (!contentType && node.root) {\n            contentType = 'text/plain';\n        }\n\n        let newNode = {\n            node,\n            headers: this.processHeaders(node.headers.getList()),\n            contentType,\n            children: []\n        };\n\n        if (!/^multipart\\//i.test(contentType)) {\n\n            if (disposition && !['attachment', 'inline'].includes(disposition)) {\n                disposition = 'attachment';\n            }\n\n            if (!disposition && !['text/plain', 'text/html'].includes(contentType)) {\n                newNode.disposition = 'attachment';\n            } else {\n                newNode.disposition = disposition || 'inline';\n            }\n\n            newNode.isAttachment = !['text/plain', 'text/html'].includes(contentType) || newNode.disposition !== 'inline';\n\n            newNode.encoding = ['quoted-printable', 'base64'].includes(encoding) ? encoding : 'binary';\n\n            if (charset) {\n                newNode.charset = charset;\n            }\n\n            let decoder = node.getDecoder();\n            if (/^text\\//.test(contentType) && node.flowed) {\n                let flowDecoder = decoder;\n                decoder = new FlowedDecoder({\n                    delSp: node.delSp\n                });\n                flowDecoder.on('error', err => {\n                    decoder.emit('error', err);\n                });\n                flowDecoder.pipe(decoder);\n            }\n\n            newNode.decoder = decoder;\n        }\n\n        if (node.root) {\n            this.headers = newNode.headers;\n        }\n\n        // find location in tree\n\n        if (!this.tree) {\n            newNode.root = true;\n            this.curnode = this.tree = newNode;\n            return newNode;\n        }\n\n        // immediate child of root node\n        if (!this.curnode.parent) {\n            newNode.parent = this.curnode;\n            this.curnode.children.push(newNode);\n            this.curnode = newNode;\n            return newNode;\n        }\n\n        // siblings\n        if (this.curnode.parent.node === node.parentNode) {\n            newNode.parent = this.curnode.parent;\n            this.curnode.parent.children.push(newNode);\n            this.curnode = newNode;\n            return newNode;\n        }\n\n        // first child\n        if (this.curnode.node === node.parentNode) {\n            newNode.parent = this.curnode;\n            this.curnode.children.push(newNode);\n            this.curnode = newNode;\n            return newNode;\n        }\n\n        // move up\n        let parentNode = this.curnode;\n        while ((parentNode = parentNode.parent)) {\n            if (parentNode.node === node.parentNode) {\n                newNode.parent = parentNode;\n                parentNode.children.push(newNode);\n                this.curnode = newNode;\n                return newNode;\n            }\n        }\n\n        // should never happen, can't detect parent\n        this.curnode = newNode;\n        return newNode;\n    }\n\n    getTextContent() {\n        let text = [];\n        let html = [];\n        let processNode = (alternative, level, node) => {\n            if (node.showMeta) {\n                let meta = ['From', 'Subject', 'Date', 'To', 'Cc', 'Bcc'].map(fkey => {\n                    let key = fkey.toLowerCase();\n                    if (!node.headers.has(key)) {\n                        return false;\n                    }\n                    let value = node.headers.get(key);\n                    if (!value) {\n                        return false;\n                    }\n                    return {\n                        key: fkey,\n                        value: Array.isArray(value) ? value[value.length - 1] : value\n                    };\n                }).filter(entry => entry);\n                if (this.hasHtml) {\n                    html.push('<table class=\"mp_head\">' + meta.map(entry => {\n\n                        let value = entry.value;\n                        switch (entry.key) {\n                            case 'From':\n                            case 'To':\n                            case 'Cc':\n                            case 'Bcc':\n                                value = value.html;\n                                break;\n                            case 'Date':\n                                value = this.options.formatDateString ? this.options.formatDateString(value) : value.toUTCString();\n                                break;\n                            case 'Subject':\n                                value = '<strong>' + he.encode(value) + '</strong>';\n                                break;\n                            default:\n                                value = he.encode(value);\n                        }\n\n                        return '<tr><td class=\"mp_head_key\">' + he.encode(entry.key) + ':</td><td class=\"mp_head_value\">' + value + '<td></tr>';\n                    }).join('\\n') + '<table>');\n                }\n                if (this.hasText) {\n                    text.push('\\n' + meta.map(entry => {\n                        let value = entry.value;\n                        switch (entry.key) {\n                            case 'From':\n                            case 'To':\n                            case 'Cc':\n                            case 'Bcc':\n                                value = value.text;\n                                break;\n                            case 'Date':\n                                value = this.options.formatDateString ? this.options.formatDateString(value) : value.toUTCString();\n                                break;\n                        }\n                        return entry.key + ': ' + value;\n                    }).join('\\n') + '\\n');\n                }\n            }\n            if (node.textContent) {\n                if (node.contentType === 'text/plain') {\n                    text.push(node.textContent);\n                    if (!alternative && this.hasHtml) {\n                        html.push(marked(node.textContent, {\n                            breaks: true,\n                            sanitize: true,\n                            gfm: true,\n                            tables: true,\n                            smartypants: true\n                        }));\n                    }\n                } else if (node.contentType === 'text/html') {\n                    html.push(node.textContent);\n                    if (!alternative && this.hasText) {\n                        text.push(htmlToText.fromString(node.textContent));\n                    }\n                }\n            }\n            alternative = alternative || node.contentType === 'multipart/alternative';\n            node.children.forEach(subNode => {\n                processNode(alternative, level + 1, subNode);\n            });\n        };\n\n        processNode(false, 0, this.tree);\n\n        let response = {\n            type: 'text'\n        };\n        if (html.length) {\n            this.html = response.html = html.join('<br/>\\n');\n        }\n        if (text.length) {\n            this.text = response.text = text.join('\\n');\n            this.textAsHtml = response.textAsHtml = text.map(part => marked(part, {\n                breaks: true,\n                sanitize: true,\n                gfm: true,\n                tables: true,\n                smartypants: true\n            })).join('<br/>\\n');\n        }\n        return response;\n    }\n\n    processChunk(data, done) {\n        switch (data.type) {\n            case 'node':\n                {\n                    let node = this.createNode(data);\n                    if (node === this.tree) {\n                        ['subject', 'references', 'date', 'to', 'from', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'reply-to'].forEach(key => {\n                            if (node.headers.has(key)) {\n                                this[key.replace(/\\-([a-z])/g, (m, c) => c.toUpperCase())] = node.headers.get(key);\n                            }\n                        });\n                        this.emit('headers', node.headers);\n                    }\n\n                    if (data.contentType === 'message/rfc822') {\n                        break;\n                    }\n\n                    if (data.parentNode && data.parentNode.contentType === 'message/rfc822') {\n                        node.showMeta = true;\n                    }\n\n                    if (node.isAttachment) {\n\n                        let contentType = node.contentType;\n                        if (node.contentType === 'application/octet-stream' && data.filename) {\n                            contentType = libmime.detectMimeType(data.filename) || 'application/octet-stream';\n                        }\n\n                        let attachment = {\n                            type: 'attachment',\n                            content: null,\n                            contentType,\n                            release: () => {\n                                attachment.release = null;\n                                if (this.waitUntilAttachmentEnd && typeof this.attachmentCallback === 'function') {\n                                    setImmediate(this.attachmentCallback);\n                                }\n                                this.attachmentCallback = false;\n                                this.waitUntilAttachmentEnd = false;\n                            }\n                        };\n\n                        let hasher = new StreamHash(attachment, 'md5');\n                        node.decoder.on('error', err => {\n                            hasher.emit('error', err);\n                        });\n                        node.decoder.pipe(hasher);\n                        attachment.content = hasher;\n\n                        this.waitUntilAttachmentEnd = true;\n                        if (data.disposition) {\n                            attachment.contentDisposition = data.disposition;\n                        }\n                        if (data.filename) {\n                            attachment.filename = data.filename;\n                        }\n                        if (node.headers.has('content-id')) {\n                            attachment.contentId = [].concat(node.headers.get('content-id') || []).shift();\n                            attachment.cid = attachment.contentId.trim().replace(/^<|>$/g, '').trim();\n                            let parentNode = node;\n                            while ((parentNode = parentNode.parent)) {\n                                if (parentNode.contentType === 'multipart/related') {\n                                    attachment.related = true;\n                                }\n                            }\n                        }\n\n                        attachment.headers = node.headers;\n                        this.push(attachment);\n                        this.attachmentList.push(attachment);\n\n                    } else if(node.disposition === 'inline') {\n                        let chunks = [];\n                        let chunklen = 0;\n                        let contentStream = node.decoder;\n\n                        if (node.contentType === 'text/plain') {\n                            this.hasText = true;\n                        } else if (node.contentType === 'text/html') {\n                            this.hasHtml = true;\n                        }\n\n                        let charset = node.charset || 'windows-1257';\n                        //charset = charset || 'windows-1257';\n\n                        if (!['ascii', 'usascii', 'utf8'].includes(charset.replace(/[^a-z0-9]+/g, '').trim().toLowerCase())) {\n                            try {\n                                let decodeStream = iconv.decodeStream(charset);\n                                contentStream.on('error', err => {\n                                    decodeStream.emit('error', err);\n                                });\n                                contentStream.pipe(decodeStream);\n                                contentStream = decodeStream;\n                            } catch (E) {\n                                // do not decode charset\n                            }\n                        }\n\n                        contentStream.on('readable', () => {\n                            let chunk;\n                            while ((chunk = contentStream.read()) !== null) {\n                                if (typeof chunk === 'string') {\n                                    chunk = Buffer.from(chunk);\n                                }\n                                chunks.push(chunk);\n                                chunklen += chunk.length;\n                            }\n                        });\n\n                        contentStream.once('end', () => {\n                            node.textContent = Buffer.concat(chunks, chunklen).toString().replace(/\\r?\\n/g, '\\n');\n                        });\n\n                        contentStream.once('error', err => {\n                            this.emit('error', err);\n                        });\n                    }\n\n                    break;\n                }\n            case 'data':\n                if (this.curnode && this.curnode.decoder) {\n                    this.curnode.decoder.end();\n                }\n                if (this.waitUntilAttachmentEnd) {\n                    this.attachmentCallback = done;\n                    return;\n                }\n                // multipart message structure\n                // this is not related to any specific 'node' block as it includes\n                // everything between the end of some node body and between the next header\n                //process.stdout.write(data.value);\n                break;\n            case 'body':\n                if (this.curnode && this.curnode.decoder) {\n                    if (this.curnode.decoder.write(data.value) === false) {\n                        return this.curnode.decoder.once('drain', done);\n                    }\n                }\n                // Leaf element body. Includes the body for the last 'node' block. You might\n                // have several 'body' calls for a single 'node' block\n                //process.stdout.write(data.value);\n                break;\n        }\n\n        setImmediate(done);\n    }\n\n    getAddressesHTML(value) {\n        let formatSingleLevel = addresses => addresses.map(address => {\n            let str = '<span class=\"mp_address_group\">';\n            if (address.name) {\n                str += '<span class=\"mp_address_name\">' + he.encode(address.name) + (address.group ? ': ' : '') + '</span>';\n            }\n            if (address.address) {\n                let link = '<a href=\"mailto:' + he.encode(address.address) + '\" class=\"mp_address_email\">' + he.encode(address.address) + '</a>';\n                if (address.name) {\n                    str += ' &lt;' + link + '&gt;';\n                } else {\n                    str += link;\n                }\n            }\n            if (address.group) {\n                str += formatSingleLevel(address.group) + ';';\n            }\n            return str + '</span>';\n        }).join(', ');\n        return formatSingleLevel([].concat(value || []));\n    }\n\n    getAddressesText(value) {\n        let formatSingleLevel = addresses => addresses.map(address => {\n            let str = '';\n            if (address.name) {\n                str += address.name + (address.group ? ': ' : '');\n            }\n            if (address.address) {\n                let link = address.address;\n                if (address.name) {\n                    str += ' <' + link + '>';\n                } else {\n                    str += link;\n                }\n            }\n            if (address.group) {\n                str += formatSingleLevel(address.group) + ';';\n            }\n            return str;\n        }).join(', ');\n        return formatSingleLevel([].concat(value || []));\n    }\n\n    updateImageLinks(replaceCallback, done) {\n        if (!this.html) {\n            return setImmediate(() => done(null, false));\n        }\n\n        let cids = new Map();\n        let html = (this.html || '').toString();\n\n        html.replace(/\\bcid:([^'\"\\s]{1,256})/g, (match, cid) => {\n            for (let i = 0, len = this.attachmentList.length; i < len; i++) {\n                if (this.attachmentList[i].cid === cid && /^image\\/[\\w]+$/i.test(this.attachmentList[i].contentType)) {\n                    if (/^image\\/[\\w]+$/i.test(this.attachmentList[i].contentType)) {\n                        cids.set(cid, {\n                            attachment: this.attachmentList[i]\n                        });\n                    }\n                    break;\n                }\n            }\n            return match;\n        });\n\n        let cidList = [];\n        cids.forEach(entry => {\n            cidList.push(entry);\n        });\n\n        let pos = 0;\n        let processNext = () => {\n            if (pos >= cidList.length) {\n                html = html.replace(/\\bcid:([^'\"\\s]{1,256})/g, (match, cid) => {\n                    if (cids.has(cid) && cids.get(cid).url) {\n                        return cids.get(cid).url;\n                    }\n                    return match;\n                });\n\n                return done(null, html);\n            }\n            let entry = cidList[pos++];\n            replaceCallback(entry.attachment, (err, url) => {\n                if (err) {\n                    return setImmediate(() => done(err));\n                }\n                entry.url = url;\n                setImmediate(processNext);\n            });\n        };\n\n        setImmediate(processNext);\n    }\n}\n\nmodule.exports = MailParser;\n","/home/travis/build/npmtest/node-npmtest-mailparser/mailparser/lib/flowed-decoder.js":"'use strict';\n\n// Helper class to rewrite nodes with specific mime type\n\nconst Transform = require('stream').Transform;\nconst libmime = require('libmime');\n\n/**\n * Really bad \"stream\" transform to parse format=flowed content\n *\n * @constructor\n * @param {String} delSp True if delsp option was used\n */\nclass FlowedDecoder extends Transform {\n    constructor(options) {\n        super();\n        this.options = options || {};\n\n        this.chunks = [];\n        this.chunklen = 0;\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (!encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n\n        callback();\n    }\n\n    _flush(callback) {\n        if (this.chunklen) {\n            let currentBody = Buffer.concat(this.chunks, this.chunklen);\n            let content = libmime.decodeFlowed(currentBody.toString('binary'), this.options.delSp);\n            this.push(Buffer.from(content, 'binary'));\n        }\n        return callback();\n    }\n}\n\nmodule.exports = FlowedDecoder;\n","/home/travis/build/npmtest/node-npmtest-mailparser/mailparser/lib/stream-hash.js":"'use strict';\n\nconst crypto = require('crypto');\nconst Transform = require('stream').Transform;\n\nclass StreamHash extends Transform {\n    constructor(attachment, algo) {\n        super();\n        this.attachment = attachment;\n        this.algo = (algo || 'md5').toLowerCase();\n        this.hash = crypto.createHash(algo);\n        this.byteCount = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        this.hash.update(chunk);\n        this.byteCount += chunk.length;\n        done(null, chunk);\n    }\n\n    _flush(done) {\n        this.attachment.checksum = this.hash.digest('hex');\n        this.attachment.size = this.byteCount;\n        done();\n    }\n}\n\nmodule.exports = StreamHash;\n","/home/travis/build/npmtest/node-npmtest-mailparser/mailparser/lib/simple-parser.js":"'use strict';\n\n\nconst MailParser = require('./mail-parser.js');\n\nmodule.exports = (input, callback) => {\n    let promise;\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = callbackPromise(resolve, reject);\n        });\n    }\n\n    let mail = {\n        attachments: []\n    };\n\n    let parser = new MailParser();\n\n    parser.on('headers', headers => {\n        mail.headers = headers;\n    });\n\n    parser.on('data', data => {\n        if (data.type === 'text') {\n            Object.keys(data).forEach(key => {\n                if (['text', 'html', 'textAsHtml'].includes(key)) {\n                    mail[key] = data[key];\n                }\n            });\n        }\n\n        if (data.type === 'attachment') {\n            mail.attachments.push(data);\n\n            let chunks = [];\n            let chunklen = 0;\n            data.content.on('readable', () => {\n                let chunk;\n                while ((chunk = data.content.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            data.content.on('end', () => {\n                data.content = Buffer.concat(chunks, chunklen);\n                data.release();\n            });\n        }\n    });\n\n    parser.on('end', () => {\n        ['subject', 'references', 'date', 'to', 'from', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'reply-to'].forEach(key => {\n            if (mail.headers.has(key)) {\n                mail[key.replace(/\\-([a-z])/g, (m, c) => c.toUpperCase())] = mail.headers.get(key);\n            }\n        });\n\n        parser.updateImageLinks((attachment, done) => done(false, 'data:' + attachment.contentType + ';base64,' + attachment.content.toString('base64')), (err, html) => {\n            if (err) {\n                return callback(err);\n            }\n            mail.html = html;\n\n            callback(null, mail);\n        });\n    });\n\n    if (typeof input === 'string') {\n        parser.end(Buffer.from(input));\n    } else if (Buffer.isBuffer(input)) {\n        parser.end(input);\n    } else {\n        input.pipe(parser);\n    }\n\n    return promise;\n};\n\nfunction callbackPromise(resolve, reject) {\n    return function (...args) {\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n}\n"}